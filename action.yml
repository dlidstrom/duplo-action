name: 'Duplo Analyser'
description: '⚡️ Super fast duplicated blocks finder'
branding:
  icon: check-square
  color: green
inputs:
  directory:
    description: 'Top directory from which to search for files. Only used with include-pattern.'
    required: false
    default: '.'
  include-pattern:
    description: 'Regular expression used to include filenames for analysis (case-insensitive). Mutually exlusive with file-list.'
    required: false
  exclude-pattern:
    description: 'Regular expression used to exclude filenames for analysis (case-insensitive). Only used with include-pattern.'
    required: false
    default: '.^'
  file-list:
    description: 'File with filenames to analyse. Mutually exclusive with include-pattern.'
    required: false
    default: ''
  minimum-lines:
    description: 'Minimum number of lines required for duplicate detection'
    required: true
    default: "10"
  minimum-line-length:
   description: 'Minimum number of characters in line (lines with less are ignored)'
   required: true
   default: "3"
  max-files:
    description: 'Maximum number of files to report (useful if there are many duplicates)'
    required: true
    default: "100"
  ignore-preprocessor-directives:
    description: 'Remove pre-processor directives before doing duplicate detection'
    required: true
    default: "true"
  version:
    description: 'Version of Duplo to use'
    required: true
    default: 'v1.1.1'
runs:
  using: "composite"
  steps:

    # platform-specific setup

    - name: Set executable name
      shell: bash
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: echo "EXE=$RUNNER_TEMP/duplo" >> $GITHUB_ENV

    - name: Set executable name
      shell: bash
      if: runner.os == 'Windows'
      run: echo "EXE=$RUNNER_TEMP\duplo.exe" >> $GITHUB_ENV

    # rest is common

    - uses: actions/cache@v4
      id: cache
      with:
        path: ${{ env.EXE }}
        key: ${{ inputs.version }}

    - name: Set variables
      shell: bash
      run: |
        DUPLO=$(echo "duplo-$RUNNER_OS.zip" | tr '[:upper:]' '[:lower:]')
        echo "DUPLO=$DUPLO" >> "$GITHUB_ENV"
        echo "ARCHIVE=$RUNNER_TEMP/duplo.zip" >> "$GITHUB_ENV"

    - name: Download Duplo
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      env:
        VERSION: ${{ inputs.version }}
      run: |
        ./download.sh "$DUPLO" "$ARCHIVE" "$VERSION"
        rm -f "$EXE"
        unzip "$ARCHIVE" -d "$RUNNER_TEMP"

    - name: Analyse files
      shell: bash
      run: |
        ARGS=(-ml "$INPUT_MINIMUM_LINES" -mc "$INPUT_MINIMUM_LINE_LENGTH")
        if [[ "$IGNORE_PREPROCESSOR_DIRECTIVES" =~ ^(true|True|1)$ ]]; then
          ARGS+=(-ip)
        fi

        if [[ -n "$FILE_LIST" ]]; then
          if [[ -n "$INCLUDE_PATTERN" ]]; then
            echo "INCLUDE_PATTERN and FILE_LIST are mutually exclusive; specify only one of them."
            exit 1
          fi

          if [[ -n "$EXCLUDE_PATTERN" ]]; then
            echo "warn: EXCLUDE_PATTERN is not used with FILE_LIST"
          fi

          if [[ -n "$DIRECTORY" ]]; then
            echo "warn: DIRECTORY is not used with FILE_LIST"
          fi

          ARGS+=("$FILE_LIST" -)
          echo "command: $EXE ${ARGS[*]}"
          "$EXE" "${ARGS[@]}"
        elif [[ -n "$INCLUDE_PATTERN" ]]; then
          ARGS+=(- -)
          echo "command: $EXE ${ARGS[*]}"
          if [[ "$RUNNER_OS" == "macOS" ]]
            find -E "$DIRECTORY" -type f \( -iregex "$INCLUDE_PATTERN" ! -iregex "$EXCLUDE_PATTERN" \) | "$EXE" "${ARGS[@]}"
          else
            find "$DIRECTORY" -type f \( -regextype awk -iregex "$INCLUDE_PATTERN" ! -iregex "$EXCLUDE_PATTERN" \) | "$EXE" "${ARGS[@]}"
          fi
        else
          echo "error: Specify either INCLUDE_PATTERN or FILE_LIST!"
        fi
      env:
        INCLUDE_PATTERN: ${{ inputs.include-pattern }}
        EXCLUDE_PATTERN: ${{ inputs.exclude-pattern }}
        FILE_LIST: ${{ inputs.file-list }}
        INPUT_MINIMUM_LINES: ${{ inputs.minimum-lines }}
        INPUT_MINIMUM_LINE_LENGTH: ${{ inputs.minimum-line-length }}
        IGNORE_PREPROCESSOR_DIRECTIVES: ${{ inputs.ignore-preprocessor-directives }}
        DIRECTORY: ${{ inputs.directory }}
